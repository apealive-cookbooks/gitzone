#
# Cookbook Name:: gitzone
# Recipe:: default
#
# Copyright (C) 2014 Petr Michalec
# 
# All rights reserved - Do Not Redistribute
#

#Changes against original install:
# - this cookbook for now install only one user/zone by default
#Changes expected:
# - not like having $HOME/zones/$username dir. May change to just zones/.

# check bind is allready installed
package "bind"


# attrs
default['gitzone']['repo_dir'] = "#{ENV[HOME]}/repos/gitzone"
default['gitzone']['repo_url'] = "https://github.com/dyne/gitzone.git"
default['gitzone']['preffix'] = "/usr"
default['gitzone']['group'] = "sysadmins"
default['gitzone']['home'] = "/home"
default['gitzone']['bind_repos_dir'] = "/etc/bind/repos"


#TODO MAKE IT HASH too loop over user that may modify
#TODO "loop over if multiple keys"
#if user pub key is nil? Then generate pub/private keys.
default['gitzone']['user_ssh_pub_keys'] = nil
#TODO loop over users, domains managed from data bag
#   iterate over to create per $user zone.cfg for domains defined in data bag
default['gitzone']['user'] = "examplezone"
default['gitzone']['domains'] = %w{ example.com example.org }


#TODO Wrap all BIND cookbook attributes used in recipe to GITZONE attributes
default['gitzone']['bind_cache_dir'] = '/var/cache/bind'

#Bad practice (unimportant dependencies)
#default['gitzone']['zone_cfg'] = "#{node['gitzone']['bind_repos_dir']}/#{node['gitzone']['user']}.conf"
#default['gitzone']['zone_dir'] = "#{node[:gitzone][:home]}/zones/#{node[:gitzone][:user]}"

zone_cfg = ::File.join(node['gitzone']['bind_repos_dir'], "#{node['gitzone']['user'].conf}")
zone_dir = ::File.join(node[:gitzone][:home], node[:gitzone][:user], 'zones', node[:gitzone][:user])
bind_named_cfg = ::File.join(node['bind']['sysconfdir'], "named.conf.local")
bind_cache_dir_gitzone = ::File.join(node['gitzone']['bind_cache_dir'], node[:gitzone][:user])

# check out the latest gitzone repo
git node['gitzone']['repo_dir'] do
  repository node['gitzone']['repo_url']
  reference "master"
  action :sync
  notifies :run, "execute[gitzone-make-install]", :immediately
end

# execute make install
execute "gitzone-install" do
    cmd =  "sed -i 's:^PREFFIX=.*:PREFFIX=#{node['gitzone']['preffix']}:' #{node['gitzone']['repo_dir']}/Makefile"
    cmd << "; cd #{node['gitzone']['repo_dir']}"
    cmd << "; make install"
    command cmd
    ignore_failure false
    action :nothing
    not_if { ::File.exists?("#{node['gitzone']['preffix']}/bin/gitzone-shell") }
end

# create gitzone user
user node['gitzone']['user'] do
    group node['gitzone']['group']
    shell node['gitzone']['preffix']+"/bin/gitzone-shell"
    home  ::File.join(node[:gitzone][:home], node[:gitzone][:user])
    action :create
end

# deploy ssh key
# code pasted from community chef-ssh-keys cookbook
ssh_keys = node['gitzone']['user_ssh_pub_keys']
home_dir = ::File.join(node[:gitzone][:home], node[:gitzone][:user])

## Creating ".ssh" directory
directory ::File.join(:home_dir,'.ssh') do
  owner node['gitzone']['user']
  group node['gitzone']['group']
  mode "0700"
end

## generate keys if not defined
if !ssh_keys do
    package 'openssh'
    bash "generate ssh keys" do
        Chef::Log.info("SSH pub keys not specified, generating")
        cwd = ::File.join(:home_dir, '.ssh')
        code <<-EOF
            ssh-keygen -t rsa -N "" -q -f #{node['gitzone']['user']}_ssh.key
            chmod og-rwx ./*
            chown #{node['gitzone']['user']} ./*
            chgrp #{node['gitzone']['group']} ./*
         EOF
        action :run
    end
    File.open("#{node['gitzone']['user']}_ssh.key.pub") do |pub|
        ssh_keys = pub
    end
end

if ssh_keys.length > 0
  authorized_keys_file = "#{home_dir}/.ssh/authorized_keys"

  if File.exist?(authorized_keys_file)
    Chef::Log.info("Appending to existing authorized keys")
    # Loading existing keys
    File.open(authorized_keys_file).each do |line|
      if line.start_with?("ssh")
        ssh_keys += Array(line.delete "\n")
      end
    end
    ssh_keys.uniq!
  end

  # Re/Creating "authorized_keys"
  template authorized_keys_file do
    owner node['gitzone']['user']
    group node['gitzone']['group']
    mode "0600"
    variables :ssh_keys => ssh_keys
  end
end


# gitzone-install
directory :zone_dir do
  owner node[:gitzone][:user]
  group node['bind'][:user]
  mode "0750"
  recursive true
  action :create
  notifies :run, "bash[gitzone-git-init]"
end

# init gitzone git repository
bash "gitzone-git-init" do
   cwd "#{node[:gitzone][:home]}/zones/#{node[:gitzone][:user]}"
   user node[:gitzone][:user]
   group node[:gitzone][:user]
   code <<-EOF
        git init . 
        git config receive.denyCurrentBranch ignore
        git config user.name "#{node[:gitzone][:user]}"
        git config user.email "#{node[:gitzone][:user]}@`hostname -f`"
     EOF
    not_if { ::Directory.exists?("#{node[:gitzone][:home]}/zones/#{node[:gitzone][:user]}/.git") }
end

# link hooks
link "#{node[:gitzone][:preffix]}/libexec/gitzone/*receive* "  do
  to :zone_dir + "/.git/hooks"
end

# if you want to use repository locally, link hooks
link "#{node[:gitzone][:preffix]}/libexec/gitzone/*commit* "  do
  to :zone_dir + "/.git/hooks"
end

#add gitzone user to bind group
group node['bind']['group'] do
    members node[:gitzone][:user]
    append true
    action :modify
end

# create gitzone cache dir
directory :bind_cache_dir do
    #TODO: place bind cache dir as attribute (differ with distribution)
    owner node[:gitzone][:user]
    group node['bind'][:user]
    mode '0750'
    recursive true
end

# create bind repos dir
directory "#{node[:gitzone]['bind_repos_dir']}" do
    owner node[:gitzone][:user]
    group node['bind'][:user]
    mode '0750'
    recursive true
end

# create gitzone zone conf
#TODO: This should do .each if array
template :zone_conf do
    path :zone_conf
    source "zone.conf.erb"
    owner node[:gitzone][:user]
    group node['bind'][:user]
    mode '0750'
    variables ({
        :domains => node[:gitzone][:domains]
    })
    notifies :run, "ruby_block[include gitzone conf to named.conf]", :delayed
end

# extend named conf (how only once?)
ruby_block "include gitzone conf to named.conf" do
  block do
    fe = Chef::Util::FileEdit.new(:bind_named_cfg)
    fe.insert_line_if_no_match(/include #{:zone_cfg}/,
                               "include #{:zone_cfg}")
    fe.write_file
  end
  action :nothing
  #notifies :reload, "service[bind]"
end


#EX
template '/etc/sudoers' do
  source 'sudoers.erb'
  mode '0440'
  owner 'root'
  group platform?('freebsd') ? 'wheel' : 'root'
  variables(
    :sudoers_groups => node['authorization']['sudo']['groups'],
    :sudoers_users => node['authorization']['sudo']['users'],
    :passwordless => node['authorization']['sudo']['passwordless']
  )
end

    



# recipe for
#  - install /deploy 
#  - configure







## EXAMPLES
# bash "setup_dotfiles" do
#  cwd "#{home_dir}/dotfiles"
#  user node['dotfiles']['user']
#  group node['dotfiles']['group']
#  environment "HOME" => home_dir
#  code "./setup.sh"
# end


